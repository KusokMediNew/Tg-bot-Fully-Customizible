import telebot
import os
import datetime
from telebot.apihelper import ApiTelegramException

# Configurations
DEBUG = True
ADMIN_IDS = [7563861429]

# with open(r'c:\\Users\\Matvejs Upesleja\\Desktop\\bottoken1.txt', 'r') as f:
    # TOKEN = f.read().strip()

TOKEN = input("Isert token: ")

print("\nBot Started...\n")

bot = telebot.TeleBot(TOKEN)

# Keyboards
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton


def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∏"))
    keyboard.add(KeyboardButton("üìÑ –ö–æ–º–∞–Ω–¥—ã"), KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"))
    keyboard.add(KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    return keyboard

def notes_list_keyboard(notes, page, notes_per_page):
    keyboard = InlineKeyboardMarkup()
    start = page * notes_per_page
    end = start + notes_per_page
    for i, note in enumerate(notes[start:end], start=start):
        title = note.split("::", 2)[1].strip()
        emoji = note.split("::", 2)[0].strip()
        keyboard.add(InlineKeyboardButton(f"{emoji} {title}", callback_data=f"open_{i}"))
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
    if end < len(notes):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_{page + 1}"))
    if nav_buttons:
        keyboard.row(*nav_buttons)
    keyboard.add(InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", callback_data="new_note"))
    return keyboard

def note_manage_keyboard(index, page):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{index}_{page}"))
    keyboard.add(InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫", callback_data=f"edit_title_{index}"))
    keyboard.add(InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"edit_body_{index}"))
    keyboard.add(InlineKeyboardButton("üé® –ò–∑–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏", callback_data=f"edit_emoji_{index}"))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page}"))
    return keyboard

def cancel_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def cancel_inline_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    return keyboard

def popular_emoji_keyboard():
    """
    Creates a keyboard with topic-related emojis in rows of 3 and a cancel button.
    """
    keyboard = InlineKeyboardMarkup(row_width=3)
    topic_emojis = ["üìö", "üìù", "üí°", "üìÖ", "‚úÖ", "‚ùå", "üéØ", "üìä", "üìå", "üîç"]
    for i in range(0, len(topic_emojis), 3):
        row = [InlineKeyboardButton(emoji, callback_data=f"emoji_{emoji}") for emoji in topic_emojis[i:i+3]]
        keyboard.row(*row)
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    return keyboard

# –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
user_note_state = {}
user_note_title = {}
user_note_emoji = {}
user_note_body = {}
user_feedback = {}

NOTES_DIR = r"C:\\Users\\Matvejs Upesleja\\Desktop\\Bot\\notes"

if not os.path.exists(NOTES_DIR):
    os.makedirs(NOTES_DIR)

def log_command(message):
    if DEBUG:
        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[{current_time}] {message.from_user.id} - {message.text}")

def is_admin(user_id):
    return user_id in ADMIN_IDS

def escape_markdown(text):
    """
    Escapes special characters in Markdown text to prevent formatting issues.
    """
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in escape_chars:
        text = text.replace(char, f"\\{char}")
    return text

feedback_storage = []  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    log_command(message)
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", reply_markup=main_menu())

# –ö–æ–º–∞–Ω–¥–∞ /admin
@bot.message_handler(commands=['admin'])
def admin(message):
    log_command(message)
    if is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "üõ† –í—ã –∞–¥–º–∏–Ω. –°–ø–µ—Ü–∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã.\n\n/crash ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    else:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

# –ö–æ–º–∞–Ω–¥–∞ /crash
@bot.message_handler(commands=['crash'])
def crash(message):
    log_command(message)
    if is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "üí• –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
        print("\n=== –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /crash ===\n")
        os._exit(0)
    else:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

# –ö–æ–º–∞–Ω–¥–∞ /feedback
@bot.message_handler(commands=['feedback'])
def handle_feedback(message):
    if is_admin(message.from_user.id):
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏
        if feedback_storage:
            feedback_list = "\n\n".join([f"üì© –û—Ç @{fb['username']}:\n{fb['text']}" for fb in feedback_storage])
            bot.send_message(message.chat.id, f"–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:\n\n{feedback_list}")
        else:
            bot.send_message(message.chat.id, "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: –ü—É—Å—Ç–æ.")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∞–º:")
        bot.register_next_step_handler(msg, save_feedback)

def save_feedback(message):
    feedback_storage.append({
        "username": message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏",
        "text": message.text
    })
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(admin_id, f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}:\n{message.text}")
        except ApiTelegramException:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É —Å ID {admin_id}")

# üìÑ –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(func=lambda m: m.text == 'üìÑ –ö–æ–º–∞–Ω–¥—ã')
def commands(message):
    log_command(message)
    bot.send_message(message.chat.id, "/start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/admin ‚Äî –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n/crash ‚Äî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n/feedback ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (abuse = BANana)")

# ‚ÑπÔ∏è –û –±–æ—Ç–µ
def about(message):
    log_command(message)
    bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏.\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @KusokMedi52")

# ‚ÑπÔ∏è –û –±–æ—Ç–µ
@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
def bot_about(message):
    about(message)

# üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@bot.message_handler(func=lambda m: m.text == 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
def support(message):
    log_command(message)
    bot.send_message(message.chat.id, "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π => @KusokMedi52.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìù –ó–∞–º–µ—Ç–∫–∏" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@bot.message_handler(func=lambda m: m.text == "üìù –ó–∞–º–µ—Ç–∫–∏")
def notes_menu(message):
    user_id = message.from_user.id
    notes_file = os.path.join(NOTES_DIR, f"notes_{user_id}.txt")
    notes = []
    if os.path.exists(notes_file):
        with open(notes_file, "r", encoding="utf-8") as f:
            notes = [n for n in f.read().split("---note---") if n.strip()]
    if notes:
        bot.send_message(
            message.chat.id,
            f"üìú –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{(len(notes) + 4) // 5})",
            reply_markup=notes_list_keyboard(notes, 0, 5)
        )
    else:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", callback_data="new_note"))
        bot.send_message(
            message.chat.id,
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫. –ù–∞–∂–º–∏—Ç–µ ‚ûï –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å.",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: not (call.data.startswith("emoji_") or call.data == "cancel"))
def callback_handler(call):
    user_id = call.from_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if call.data.startswith("edit_title_"):
        try:
            index = int(call.data.split("_")[2])
            user_note_state[user_id] = f"edit_title_{index}"
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ", callback_data=f"edit_mode_prepend_{index}"))
            keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü", callback_data=f"edit_mode_append_{index}"))
            keyboard.add(InlineKeyboardButton("–ó–∞–º–µ–Ω–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"edit_mode_replace_{index}"))
            keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
            bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard
            )
        except (IndexError, ValueError, Exception):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–º–µ—Ç–∫–∏
    if call.data.startswith("edit_body_"):
        try:
            index = int(call.data.split("_")[2])
            user_note_state[user_id] = f"edit_body_{index}"
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ", callback_data=f"edit_mode_prepend_{index}"))
            keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü", callback_data=f"edit_mode_append_{index}"))
            keyboard.add(InlineKeyboardButton("–ó–∞–º–µ–Ω–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"edit_mode_replace_{index}"))
            keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
            bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard
            )
        except (IndexError, ValueError, Exception):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if call.data.startswith("edit_mode_"):
        try:
            parts = call.data.split("_")
            mode = parts[2]  # prepend, append, replace
            index = int(parts[3])
            state = user_note_state.get(user_id)
            if state and (state.startswith("edit_title_") or state.startswith("edit_body_")):
                # Update state to include mode
                user_note_state[user_id] = f"{state}_{mode}"
                bot.edit_message_text(
                    "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=cancel_inline_keyboard()
                )
            else:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        except (IndexError, ValueError):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    if call.data.startswith("edit_emoji_"):
        try:
            index = int(call.data.split("_")[2])
            user_note_state[user_id] = f"change_emoji_{index}"
            bot.edit_message_text(
                "üé® –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=popular_emoji_keyboard()
            )
        except (IndexError, ValueError):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if call.data.startswith("edit_confirm_yes_"):
        try:
            index = int(call.data.split("_")[3])
            state = user_note_state.get(user_id)
            if not state or not state.startswith("edit_confirm_"):
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
                return
            # Save the edited note
            notes_file = os.path.join(NOTES_DIR, f"notes_{user_id}.txt")
            if not os.path.exists(notes_file):
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                user_note_state.pop(user_id, None)
                return
            with open(notes_file, "r", encoding="utf-8") as f:
                notes = [n for n in f.read().split("---note---") if n.strip()]
            if not (0 <= index < len(notes)):
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–º–µ—Ç–∫–∏.")
                user_note_state.pop(user_id, None)
                return
            note_parts = notes[index].split("::", 2)
            # Use the buffered edited data
            emoji = user_note_emoji.get(user_id, note_parts[0].strip())  # Default to original emoji if not updated
            title = user_note_title.get(user_id, note_parts[1].strip())  # Default to original title if not updated
            body = user_note_body.get(user_id, note_parts[2].strip())  # Default to original body if not updated
            try:
                bot.edit_message_text(
                    f"‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n\n{emoji} *{escape_markdown(title)}*\n{escape_markdown(body)}",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode="Markdown",
                    reply_markup=note_manage_keyboard(index, index // 5)
                )
            except Exception as e:
                bot.send_message(
                    call.message.chat.id,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}",
                    parse_mode="Markdown",
                    reply_markup=note_manage_keyboard(index, index // 5)
                )
        except Exception as e:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {e}")
    elif call.data == "cancel":
        user_note_state.pop(user_id, None)
        user_note_title.pop(user_id, None)
        user_note_emoji.pop(user_id, None)
        bot.answer_callback_query(call.id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            print(f"Error deleting message: {e}")
        bot.send_message(
            call.message.chat.id,
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu()
        )
        return

    if call.data == "new_note":
        user_note_state[user_id] = "title"
        user_note_emoji[user_id] = "üìÑ"  # Default emoji set to paper emoji
        bot.send_message(
            call.message.chat.id,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏.",
            reply_markup=cancel_keyboard()
        )
        return


    notes_file = os.path.join(NOTES_DIR, f"notes_{call.from_user.id}.txt")
    if not os.path.exists(notes_file):
        try:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        except ApiTelegramException:
            pass  # Ignore expired callback query
        return

    with open(notes_file, "r", encoding="utf-8") as f:
        notes = [n for n in f.read().split("---note---") if n.strip()]

    notes_per_page = 5

    if call.data.startswith("open_"):
        try:
            index = int(call.data.split("_")[1])
            if 0 <= index < len(notes):
                note_parts = notes[index].split("::", 2)
                emoji = note_parts[0].strip()
                title = note_parts[1].strip()
                body = note_parts[2].strip()
                page = index // notes_per_page
                try:
                    bot.edit_message_text(
                        f"{emoji} *{escape_markdown(title)}*\n{escape_markdown(body)}",
                        call.message.chat.id,
                        call.message.message_id,
                        parse_mode="Markdown",
                        reply_markup=note_manage_keyboard(index, page)
                    )
                except ApiTelegramException:
                    bot.send_message(
                        call.message.chat.id,
                        f"{emoji} *{escape_markdown(title)}*\n{escape_markdown(body)}",
                        parse_mode="Markdown",
                        reply_markup=note_manage_keyboard(index, page)
                    )
        except (IndexError, ValueError):
            try:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            except ApiTelegramException:
                pass  # Ignore expired callback query
    elif call.data.startswith("page_"):
        try:
            page = int(call.data.split("_")[1])
            total_pages = (len(notes) + notes_per_page - 1) // notes_per_page
            try:
                bot.edit_message_text(
                    f"üìú –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=notes_list_keyboard(notes, page, notes_per_page)
                )
            except ApiTelegramException:
                bot.send_message(
                    call.message.chat.id,
                    f"üìú –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})",
                    reply_markup=notes_list_keyboard(notes, page, notes_per_page)
                )
        except (IndexError, ValueError):
            try:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            except ApiTelegramException:
                pass  # Ignore expired callback query
    elif call.data.startswith("delete_"):
        try:
            parts = call.data.split("_")
            index = int(parts[1])
            page = int(parts[2])

            if 0 <= index < len(notes):
                del notes[index]
                with open(notes_file, "w", encoding="utf-8") as f:
                    for note in notes:
                        f.write(note.strip() + "\n---note---\n")
                try:
                    bot.answer_callback_query(call.id, "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ç–∫–æ–π –∏–∑ —á–∞—Ç–∞
                    try:
                        bot.delete_message(call.message.chat.id, call.message.message_id)
                    except Exception:
                        pass
                except ApiTelegramException:
                    pass  # Ignore expired callback query

                if notes:
                    try:
                        bot.edit_message_text(
                            f"üìú –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})",
                            call.message.chat.id,
                            call.message.message_id,
                            reply_markup=notes_list_keyboard(notes, page, notes_per_page)
                        )
                    except ApiTelegramException:
                        bot.send_message(
                            call.message.chat.id,
                            f"üìú –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})",
                            reply_markup=notes_list_keyboard(notes, page, notes_per_page)
                        )
                else:
                    try:
                        bot.send_message(
                            call.message.chat.id,
                            "üìù –í—Å–µ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é!",
                            reply_markup=main_menu()  # Use main menu keyboard here
                        )
                    except ApiTelegramException:
                        pass
            else:
                try:
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
                except ApiTelegramException:
                    pass  # Ignore expired callback query
        except (IndexError, ValueError):
            try:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            except ApiTelegramException:
                pass  # Ignore expired callback query
            parts = call.data.split("_")
            index = int(parts[1])
            page = int(parts[2])

            if 0 <= index < len(notes):
                del notes[index]
                with open(notes_file, "w", encoding="utf-8") as f:
                    for note in notes:
                        f.write(note.strip() + "\n---note---\n")
                try:
                    bot.answer_callback_query(call.id, "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ç–∫–æ–π –∏–∑ —á–∞—Ç–∞
                    try:
                        bot.delete_message(call.message.chat.id, call.message.message_id)
                    except Exception:
                        pass
                except ApiTelegramException:
                    pass  # Ignore expired callback query

                if notes:
                    bot.edit_message_text(
                        f"üìú –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})",
                        call.message.chat.id,
                        call.message.message_id,
                        reply_markup=notes_list_keyboard(notes, page, notes_per_page)
                    )
                else:
                    bot.edit_message_text(
                        "üìù –í—Å–µ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é!",
                        call.message.chat.id,
                        call.message.message_id,
                        reply_markup=main_menu()  # Use main menu keyboard here
                    )
            else:
                try:
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
                except ApiTelegramException:
                    pass  # Ignore expired callback query
        except (IndexError, ValueError):
            try:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            except ApiTelegramException:
                pass  # Ignore expired callback query

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("emoji_") or call.data == "cancel")
def emoji_selection_handler(call):
    user_id = call.from_user.id
    print(f"DEBUG: emoji_selection_handler called with call.data={call.data} and user_note_state={user_note_state.get(user_id)}")
    if call.data == "cancel":
        user_note_state.pop(user_id, None)
        bot.edit_message_text(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=main_menu()
        )
    elif call.data.startswith("emoji_"):
        emoji = call.data[len("emoji_"):]
        state = user_note_state.get(user_id)
        print(f"DEBUG: emoji selected: {emoji}, current state: {state}")
        if state and state.startswith("change_emoji_"):
            index = int(state.split("_")[2])
            notes_file = os.path.join(NOTES_DIR, f"notes_{user_id}.txt")
            if os.path.exists(notes_file):
                with open(notes_file, "r", encoding="utf-8") as f:
                    notes = [n for n in f.read().split("---note---") if n.strip()]
                if 0 <= index < len(notes):
                    note_parts = notes[index].split("::", 2)
                    title = note_parts[1].strip()
                    body = note_parts[2].strip()
                    notes[index] = f"{emoji}::{title}::{body}"
                    with open(notes_file, "w", encoding="utf-8") as f:
                        for note in notes:
                            f.write(note.strip() + "\n---note---\n")
                    bot.answer_callback_query(call.id, "üé® –≠–º–æ–¥–∑–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                    # Instead of showing main menu, show updated note with note_manage_keyboard
                    try:
                        bot.edit_message_text(
                            f"{emoji} *{escape_markdown(title)}*\n{escape_markdown(body)}",
                            call.message.chat.id,
                            call.message.message_id,
                            parse_mode="Markdown",
                            reply_markup=note_manage_keyboard(index, index // 5)
                        )
                    except Exception:
                        bot.send_message(
                            call.message.chat.id,
                            f"{emoji} *{escape_markdown(title)}*\n{escape_markdown(body)}",
                            parse_mode="Markdown",
                            reply_markup=note_manage_keyboard(index, index // 5)
                        )
            user_note_state.pop(user_id, None)
            user_note_title.pop(user_id, None)
            user_note_emoji.pop(user_id, None)
            return
        elif state == "emoji":
            user_note_emoji[user_id] = emoji
            bot.answer_callback_query(call.id, "üé® –≠–º–æ–¥–∑–∏ –≤—ã–±—Ä–∞–Ω–æ!")
            user_note_state[user_id] = "body"
            try:
                bot.edit_message_text(
                    "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏.",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=cancel_inline_keyboard()
                )
            except Exception:
                bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏.", reply_markup=cancel_keyboard())
        else:
            user_note_emoji[user_id] = emoji
            bot.answer_callback_query(call.id, "üé® –≠–º–æ–¥–∑–∏ –≤—ã–±—Ä–∞–Ω–æ!")
            user_note_state[user_id] = "body"
            try:
                bot.edit_message_text(
                    "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏.",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=cancel_inline_keyboard()
                )
            except Exception:
                bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏.", reply_markup=cancel_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (–∑–∞–º–µ—Ç–∫–∞)
@bot.message_handler(func=lambda message: user_note_state.get(message.from_user.id) in ["title", "body", "emoji"] or (user_note_state.get(message.from_user.id) and user_note_state.get(message.from_user.id).startswith(("edit_title_", "edit_body_"))))
def note_text_handler(message):
    user_id = message.from_user.id
    text = message.text

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_note_state.pop(user_id, None)
        user_note_title.pop(user_id, None)
        user_note_emoji.pop(user_id, None)
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception:
            pass
        bot.send_message(
            message.chat.id,
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu()
        )
        return

    state = user_note_state.get(user_id)
    if state == "title":
        user_note_title[user_id] = text
        log_command(message)  # Log note title input
        user_note_state[user_id] = "emoji"
        bot.send_message(
            message.chat.id,
            "üé® –í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=popular_emoji_keyboard()
        )
    elif state == "body":
        if user_id not in user_note_title:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu())
            user_note_state.pop(user_id, None)
            user_note_emoji.pop(user_id, None)
            return
        title = user_note_title[user_id]
        body = text
        emoji = user_note_emoji.get(user_id, "üìÑ")  # Default emoji
        notes_file = os.path.join(NOTES_DIR, f"notes_{user_id}.txt")
        with open(notes_file, "a", encoding="utf-8") as f:
            f.write(f"{emoji}::{title.strip()}::{body.strip()}\n---note---\n")
        log_command(message)  # Log note body input and save
        user_note_state.pop(user_id, None)
        user_note_title.pop(user_id, None)
        user_note_emoji.pop(user_id, None)
        bot.send_message(
            message.chat.id,
            "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
            reply_markup=main_menu()
        )
    elif state and (state.startswith("edit_title_") or state.startswith("edit_body_")):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
        try:
            parts = state.split("_")
            part = parts[1]  # title or body
            index = int(parts[2])
            mode = parts[3]  # prepend, append, replace
            notes_file = os.path.join(NOTES_DIR, f"notes_{user_id}.txt")
            if not os.path.exists(notes_file):
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=main_menu())
                user_note_state.pop(user_id, None)
                return
            with open(notes_file, "r", encoding="utf-8") as f:
                notes = [n for n in f.read().split("---note---") if n.strip()]
            if not (0 <= index < len(notes)):
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–º–µ—Ç–∫–∏.", reply_markup=main_menu())
                user_note_state.pop(user_id, None)
                return
            note_parts = notes[index].split("::", 2)
            emoji = note_parts[0].strip()
            title = note_parts[1].strip()
            body = note_parts[2].strip()
            new_text = text.strip()
            if part == "title":
                if mode == "prepend":
                    title = new_text + title
                elif mode == "append":
                    title = title + new_text
                elif mode == "replace":
                    title = new_text
            elif part == "body":
                if mode == "prepend":
                    body = new_text + body
                elif mode == "append":
                    body = body + new_text
                elif mode == "replace":
                    body = new_text
            notes[index] = f"{emoji}::{title}::{body}"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            user_note_title[user_id] = title
            user_note_body[user_id] = body
            user_note_emoji[user_id] = emoji
            user_note_state[user_id] = f"edit_confirm_{index}"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            preview_text = f"‚úèÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–∫–∏:\n\n{emoji} *{escape_markdown(title)}*\n{escape_markdown(body)}"
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"edit_confirm_yes_{index}"))
            keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
            bot.send_message(
                message.chat.id,
                preview_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            print(f"[{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] User {user_id} edited note {index} ({part}, {mode})")
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda m: True)
def fallback_handler(message):
    bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞/—Ç–µ–∫—Å—Ç ‚ùå", reply_markup=main_menu())

if __name__ == "__main__":
    bot.polling(none_stop=True)